// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "frankie060392/rest-api-clean-arch/internal/book/model"

	mock "github.com/stretchr/testify/mock"
)

// BookServiceInterface is an autogenerated mock type for the BookServiceInterface type
type BookServiceInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, book
func (_m *BookServiceInterface) Create(c context.Context, book *model.Book) error {
	ret := _m.Called(c, book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Book) error); ok {
		r0 = rf(c, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: c, id
func (_m *BookServiceInterface) GetById(c context.Context, id string) (model.Book, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Book, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Book); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookServiceInterface creates a new instance of BookServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookServiceInterface {
	mock := &BookServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
